import pandas as pd
import numpy as np
from impala.dbapi import connect

# Caminho do arquivo original
arquivo = "C:/Users/x15501492/Downloads/bdhc.xlsx"

# Leitura da planilha
df = pd.read_excel(arquivo, sheet_name="BD_HC_FATAL_ARMAZ√âM")

# Normaliza o texto da coluna antes do filtro
df["REDS desconsiderado?"] = (
    df["REDS desconsiderado?"]
    .astype(str)           # garante string
    .str.strip()           # remove espa√ßos extras
    .str.upper()           # tudo mai√∫sculo
)

# Agora aplica o filtro com seguran√ßa
df = df[df["REDS desconsiderado?"] == "N√ÉO"]
print("Total ap√≥s filtro 'N√ÉO' (corrigido):", len(df))


# üîπ Remover duplicatas pela coluna "N√∫mero REDS"
df = df.drop_duplicates(subset=["N√∫mero REDS"], keep="first")

# Lista de colunas a remover
colunas_excluir = [
    "N√∫mero REDS Envolvido", "N¬∫ REDS considerado", "Natureza do Delito Completa",
    "Logradouro Ocorr√™ncia N√£o Cadastrado - FATO", "Logradouro Ocorr√™ncia - FATO FINAL",
    "N√∫mero Logradouro - FATO", "Logradouro Cruzamento - Tipo - FATO", "Logradouro Cruzamento - FATO",
    "Logradouro Cruzamento N√£o Cadastrado - FATO", "Ponto de Refer√™ncia - FATO", "RISP - FATO - Antiga",
    "Territ√≥rio de Desenvolvimento", "Territ√≥rio de Desenvolvimento Atual", "Latitude GEOSITE",
    "Longitude GEOSITE", "Endere√ßo Completo", "Latitude Google", "Longitude Google",
    "Coordenada Procurada?", "Tipo de corre√ß√£o", "Nome Envolvido", "Data Nascimento",
    "Faixa Et√°ria", "Faixa Et√°ria SENASP", "Sexo ajustado", "Nome M√£e", "Nome Pai",
    "Grupo Tipo Envolvimento", "Grau Les√£o", "Envolvido Civil/Militar", "Policial em Servi√ßo",
    "Ocupa√ß√£o Atual", "Estado Civil", "Documento Identidade", "CPF", "Grupo Causa Presumida - C√≥digo",
    "Grupo Causa Presumida", "Causa Presumida - C√≥digo", "Meio Utilizado - C√≥digo",
    "C√≥digo Grupo Compl Nat", "Desc Longa Grupo Compl Nat", "C√≥digo Subgrupo Compl Nat",
    "Desc Longa Subgrupo Compl Nat", "C√≥digo Local Imediato", "Munic√≠pio Naturalidade",
    "UF Naturalidade - Sigla", "Logradouro Envolvido", "Logradouro Envolvido N√£o Cadastrado",
    "N√∫mero Logradouro Envolvido", "Data Ajuste Endere√ßo", "Hora Ajuste Endere√ßo",
    "Situa√ß√£o Ajuste Endere√ßo", "Tipo Boletim de Ocorr√™ncias", "√ìrg√£o Unidade Registro",
    "Unidade √Årea Civil", "Unidade √Årea Militar", "Unid Registro N√≠vel 6", "Data Inclus√£o REDS",
    "Data Fechamento REDS", "Natureza Secund√°ria 1", "Natureza Secund√°ria 2", "Natureza Secund√°ria 3",
    "Hist√≥rico Ocorr√™ncia", "CPC", "COD. Setor Censit√°rio", "TipoIncons", "CMunIBGE",
    "NMunIBGE", "CompMun", 'REDS desconsiderado?', 'Bairro - FATO', 'Bairro N√£o Cadastrado - FATO', 
    'Idade Aparente', 'Sexo', 'C√∫tis', 'Escolaridade', 'Rela√ß√£o V√≠tima/Autor', 'Tipo Logradouro Envolvido', 
    'Bairro Envolvido', 'Bairro Envolvido N√£o Cadastrado', 'Munic√≠pio Envolvido', 'UF Envolvido - Nome'
]

# Remover colunas desnecess√°rias
df = df.drop(columns=colunas_excluir, errors="ignore")


# Renomear colunas
df = df.rename(columns={
    'N√∫mero Envolvido/Ocorr√™ncia': 'Qtde Ocorr√™ncias',
    'Logradouro Ocorr√™ncia - Tipo - FATO': 'Logradouro Ocorr√™ncia - Tipo',
    'BAIRRO - FATO FINAL': 'Bairro - Fato Final',
    'Munic√≠pio - FATO': 'Munic√≠pio',
    'Munic√≠pio - C√≥digo - FATO': 'Munic√≠pio - C√≥digo',
    'UF - Sigla - FATO': 'Uf - Sigla',
    'RISP - FATO - Atual': 'Risp',
    'Unid Registro N√≠vel 9': 'Unid Registro N√≠vel 8',
    'RMBH': 'Rmbh',
    'Latitude Final': 'Latitude',
    'Longitude Final': 'Longitude'
})

# Adicionar novas colunas
df["Descri√ß√£o Subclasse Nat Principal"] = "HOMICIDIO"
df["Tentado/Consumado Nat Principal"] = "CONSUMADO"
df["Natureza Nomenclatura Banco"] = "Homic√≠dio Consumado (Registros)"
df["M√™s Fato Resumido"] = ""
df["Faixa 6 Horas Fato"] = ""
df["Logradouro Ocorr√™ncia"] = ""
df["Bairro - Fato Final - Municipio"] = df["Bairro - Fato Final"].fillna('') + ", " + df["Munic√≠pio"].fillna('')


#M√™s Fato Resumido (map seguro) ---
mapa_meses = {
    "1": "JAN", "2": "FEV", "3": "MAR", "4": "ABR", "5": "MAI", "6": "JUN",
    "7": "JUL", "8": "AGO", "9": "SET", "10": "OUT", "11": "NOV", "12": "DEZ"
}

# Normaliza e remove .0 se vier como "1.0"
if "M√™s Num√©rico Fato" in df.columns:
    df["M√™s Num√©rico Fato"] = df["M√™s Num√©rico Fato"].astype(str).str.replace(r"\.0$", "", regex=True)
    df["M√™s Fato Resumido"] = df["M√™s Num√©rico Fato"].map(mapa_meses)
else:
    df["M√™s Fato Resumido"] = None
    

# dicion√°rio risps
mapa_risp = {
    "01¬™ RISP - Belo Horizonte": "RISP 1 - BH", "02¬™ RISP - Contagem": "RISP 2 - CONTAGEM",
    "03¬™ RISP - Vespasiano": "RISP 3 - VESPASIANO", "04¬™ RISP - Juiz de Fora": "RISP 4 - JUIZ DE FORA",
    "05¬™ RISP - Uberaba": "RISP 5 - UBERABA", "06¬™ RISP - Lavras": "RISP 6 - LAVRAS",
    "07¬™ RISP - Divin√≥polis": "RISP 7 - DIVIN√ìPOLIS", "08¬™ RISP - Governador Valadares": "RISP 8 - GOV. VALADARES",
    "09¬™ RISP - Uberl√¢ndia": "RISP 9 - UBERL√ÇNDIA", "10¬™ RISP - Patos de Minas": "RISP 10 - PATOS DE MINAS",
    "11¬™ RISP - Montes Claros": "RISP 11 - MONTES CLAROS", "12¬™ RISP - Ipatinga": "RISP 12 - IPATINGA",
    "13¬™ RISP - Barbacena": "RISP 13 - BARBACENA", "14¬™ RISP - Curvelo": "RISP 14 - CURVELO",
    "15¬™ RISP - Te√≥filo Otoni": "RISP 15 - TE√ìFILO OTONI", "16¬™ RISP - Una√≠": "RISP 16 - UNA√ç",
    "17¬™ RISP - Pouso Alegre": "RISP 17 - POUSO ALEGRE", "18¬™ RISP - Po√ßos de Caldas": "RISP 18 - PO√áOS DE CALDAS",
    "19¬™ RISP - Sete Lagoas": "RISP 19 - SETE LAGOAS"
}

# transforma risps
if "Risp" in df.columns:
    df["Risp"] = df["Risp"].astype(str).str.replace(r"\.0$", "", regex=True)
    df["Risp"] = df["Risp"].map(mapa_risp)
else:
    df["Risp"] = None

# dicion√°rio dias
mapa_dias = {
    "SEGUNDA-FEIRA": "1", "TER√áA-FEIRA": "2", "QUARTA-FEIRA": "3", "QUINTA-FEIRA": "4", "SEXTA-FEIRA": "5", "S√ÅBADO": "6", "DOMINGO": "7"
}

# transforma dia da semana
if "Dia da Semana Fato" in df.columns:
    df["Dia da Semana Fato"] = df["Dia da Semana Fato"].astype(str).str.replace(r"\.0$", "", regex=True)
    df["Dia da Semana Fato"] = df["Dia da Semana Fato"].map(mapa_dias)
else:
    df["Dia da Semana Fato"] = None
    
# --- Formatar 'Data Fato' ---
if "Data Fato" in df.columns:
    df["Data Fato"] = pd.to_datetime(df["Data Fato"], errors="coerce")  # converte para datetime
    df["Data Fato"] = df["Data Fato"].dt.strftime("%d/%m/%Y")           # formata dd/mm/aaaa
    
# dicion√°rio rmbh
mapa_rmbh = {
    "1) Belo Horizonte": "N√ÉO", "2) RMBH (sem BH)": "SIM", "3) Interior de MG": "N√ÉO"
}

# transforma rmbh
if "Rmbh" in df.columns:
    df["Rmbh"] = df["Rmbh"].astype(str).str.replace(r"\.0$", "", regex=True)
    df["Rmbh"] = df["Rmbh"].map(mapa_rmbh)
else:
    df["Rmbh"] = None
    
# trata coluna qtde ocorrencias
if "Qtde Ocorr√™ncias" in df.columns:
    df["Qtde Ocorr√™ncias"] = 1
    df["Qtde Ocorr√™ncias"] = df["Qtde Ocorr√™ncias"].astype(int)

# --- Convers√£o de hor√°rio mais tolerante ---
def classificar_faixa6(hora):
    try:
        if pd.isna(hora):
            return None
        if isinstance(hora, str):
            hora = pd.to_datetime(hora, errors="coerce").time()
        if hora is None:
            return None
        h = hora.hour
        if 0 <= h <= 5:
            return "De 00:00 a 05:59"
        elif 6 <= h <= 11:
            return "De 06:00 a 11:59"
        elif 12 <= h <= 17:
            return "De 12:00 a 17:59"
        else:
            return "De 18:00 a 23:59"
    except Exception:
        return None

# Aplica a fun√ß√£o diretamente sem for√ßar o formato de tempo
df["Faixa 6 Horas Fato"] = df["Hor√°rio Fato"].apply(classificar_faixa6)

# Reordenar colunas
ordem_colunas = [
    'N√∫mero REDS', 'Qtde Ocorr√™ncias', 'Descri√ß√£o Subclasse Nat Principal', 'Tentado/Consumado Nat Principal',
    'Natureza Principal Completa', 'Natureza Nomenclatura Banco', 'Ano Fato', 'M√™s Fato Resumido',
    'M√™s Num√©rico Fato', 'Data Fato', 'Dia da Semana Fato', 'Hor√°rio Fato', 'Faixa 1 Hora Fato',
    'Faixa 6 Horas Fato', 'Causa Presumida', 'Desc Longa Meio Utilizado', 'Descri√ß√£o Grupo Local Imediato',
    'Descri√ß√£o Local Imediato', 'Logradouro Ocorr√™ncia - Tipo', 'Logradouro Ocorr√™ncia', 'Bairro - Fato Final', 
    'Bairro - Fato Final - Municipio', 'Munic√≠pio', 'Munic√≠pio - C√≥digo', 'Uf - Sigla', 
    'Unid Registro N√≠vel 8', 'Risp', 'Rmbh', 'Latitude', 'Longitude'
]

df = df[[col for col in ordem_colunas if col in df.columns]]

# Salvar resultado final
df.to_excel("C:/Users/x15501492/Downloads/BDHC_formatado_registros.xlsx", index=False)

print("‚úÖ Deu bom")
